import cv2
from skimage import color
from skimage.filters import threshold_otsu
from skimage.morphology import disk, binary_dilation, binary_erosion
from skimage.measure import find_contours
import matplotlib.pyplot as plt
import numpy as np
from skimage import morphology

def edge_detection(image_path, image_name, shouldSkeletonize):
    image = cv2.imread(image_path)
    gray_image = color.rgb2gray(image)

    threshold_value = threshold_otsu(gray_image)
    binary_image = gray_image > threshold_value

    selem = disk(3)
    dilated_image = binary_dilation(binary_image, selem)
    eroded_image = binary_erosion(binary_image, selem)

    edges = dilated_image - eroded_image

    if shouldSkeletonize:
        skeleton = morphology.skeletonize(edges)
    else:
        skeleton = edges

    contours = find_contours(skeleton, 0.8)

    edge_lengths = [len(contour) for contour in contours]

    plt.figure(figsize=(12, 6))

    plt.subplot(2, 2, 1)
    plt.imshow(gray_image, cmap='gray')
    plt.title(f'Obraz Oryginalny - {image_name}')

    plt.subplot(2, 2, 2)
    plt.imshow(skeleton, cmap='gray')
    plt.title(f'Detekcja KrawÄ™dzi - {image_name}')

    plt.show()

    if gray_image.shape[:2] == skeleton.shape:
        original_extension = image_path.split('.')[-1].lower()
        saved_image_path = f'saved_images/{image_name}_edges.{original_extension}'
        cv2.imwrite(saved_image_path, (skeleton * 255).astype(np.uint8))
        print(f'Original Image Shape (Resolution) ({image_name}): {gray_image.shape}')
        print(f'Edges Image Shape (Resolution) ({image_name}): {skeleton.shape}')
        print("Image successfully saved to saved_images/ folder.")
    else:
        print("Error: Resolutions of the original and processed images do not match.")
        return None, None

    return skeleton, edge_lengths
